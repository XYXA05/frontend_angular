import { quat } from "gl-matrix";
import { NoBoolean } from "./type/utils";
export declare const isString: (val: any) => val is string;
export declare const isElement: (val: any) => val is Element;
export declare const createElement: (className: string, tag?: string) => HTMLElement;
export declare const getNullableElement: (el: HTMLElement | string | null, parent?: HTMLElement) => HTMLElement | null;
export declare const getElement: (el: HTMLElement | string, parent?: HTMLElement) => HTMLElement;
export declare const findCanvas: (root: HTMLElement, selector: string) => HTMLCanvasElement;
export declare const range: (end: number) => number[];
export declare const clamp: (x: number, min: number, max: number) => number;
export declare const lerp: (a: number, b: number, t: number) => number;
export declare const circulate: (val: number, min: number, max: number) => number;
export declare const merge: (target: object, ...srcs: object[]) => object;
export declare const findIndex: <T>(array: T[], checker: (val: T) => boolean) => number;
export declare const getObjectOption: <T extends boolean | object>(val?: T) => NoBoolean<T>;
export declare const toVerticalFov: (fovRadian: number, aspect: number) => number;
export declare const reorderCube: <T>(arr: T[], order: string, defaultOrder?: string) => T[];
export declare const isFullscreen: () => boolean;
export declare const sensorCanBeEnabledIOS: () => boolean;
export declare const hfovToZoom: (baseFov: number, fov: number) => number;
export declare const eulerToQuat: (out: quat, yaw: number, pitch: number, roll: number) => quat;
export declare const quatToEuler: (quaternion: quat) => {
    pitch: number;
    yaw: number;
};
