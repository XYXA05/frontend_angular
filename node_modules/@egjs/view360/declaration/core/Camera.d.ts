import Component from "@egjs/component";
import { mat4, quat, vec3 } from "gl-matrix";
import CameraAnimation from "./CameraAnimation";
import { CAMERA_EVENTS } from "../const/internal";
import { Range } from "../type/utils";
export interface CameraEvents {
    [CAMERA_EVENTS.ANIMATION_END]: {
        animation: CameraAnimation;
    };
}
export interface CameraOptions {
    initialYaw: number;
    initialPitch: number;
    initialZoom: number;
    yawRange: Range | null;
    pitchRange: Range | null;
    zoomRange: Range | null;
    fov: number;
}
declare class Camera extends Component<CameraEvents> {
    yaw: number;
    pitch: number;
    zoom: number;
    initialYaw: number;
    initialPitch: number;
    initialZoom: number;
    rollOffset: number;
    quaternion: quat;
    position: vec3;
    animation: CameraAnimation | null;
    viewMatrix: mat4;
    projectionMatrix: mat4;
    fov: number;
    private _initialYawRange;
    private _initialPitchRange;
    private _initialZoomRange;
    private _yawRange;
    private _pitchRange;
    private _zoomRange;
    private _up;
    private _aspect;
    private _changed;
    private _maxRenderHeight;
    get aspect(): number;
    get changed(): boolean;
    get yawRange(): Range | null;
    set yawRange(val: Range | null);
    get pitchRange(): Range | null;
    set pitchRange(val: Range | null);
    get zoomRange(): Range | null;
    set zoomRange(val: Range | null);
    constructor({ initialYaw, initialPitch, initialZoom, yawRange, pitchRange, zoomRange, fov }: CameraOptions);
    destroy(): void;
    resize(width: number, height: number): void;
    lookAt({ yaw, pitch, zoom }: Partial<{
        yaw: number;
        pitch: number;
        zoom: number;
    }>): void;
    rotate(rotation: quat, zoom?: number): void;
    animateTo({ yaw, pitch, zoom, duration, easing }?: Partial<{
        yaw: number;
        pitch: number;
        zoom: number;
        duration: number;
        easing: (x: number) => number;
    }>): Promise<void>;
    restrictYawRange(min: number, max: number): void;
    restrictPitchRange(min: number, max: number): void;
    restrictZoomRange(min: number, max: number): void;
    restrictRenderHeight(height: number): void;
    resetRange(): void;
    getYawRange(zoom: number): Readonly<Range>;
    getPitchRange(zoom: number): Readonly<Range>;
    getZoomRange(): {
        min: number;
        max: number;
        current: number;
    };
    getHorizontalFov(zoom?: number): number;
    getVerticalFov(zoom?: number): number;
    fovToZoom(fov: number): number;
    updateMatrix(): void;
    onFrameRender(): void;
    private _updateQuaternion;
    private _getZoomedHorizontalFov;
}
export default Camera;
