/// <reference types="webxr" />
import { mat4 } from "gl-matrix";
import Uniform from "../uniform/Uniform";
import Camera from "./Camera";
import Object3D from "./Object3D";
import ShaderProgram from "./ShaderProgram";
import VertexArrayObject from "./VertexArrayObject";
import Texture from "../texture/Texture";
import Geometry from "../geometry/Geometry";
import { UniformLocations } from "../type/internal";
declare class WebGLContext {
    private _canvas;
    private _gl;
    private _contextLost;
    private _maxTextureSize;
    private _isWebGL2;
    private _debug;
    private _extensions;
    get canvas(): HTMLCanvasElement;
    get maxTextureSize(): number;
    get isWebGL2(): boolean;
    get supportVAO(): boolean;
    get lost(): boolean;
    get debug(): boolean;
    constructor(canvas: HTMLCanvasElement, debug: boolean);
    init(): void;
    destroy(): void;
    forceLoseContext(): void;
    forceRestoreContext(): void;
    clear(): void;
    resize(): void;
    viewport(x: number, y: number, width: number, height: number): void;
    createVAO(geometry: Geometry, shaderProgram: ShaderProgram): VertexArrayObject;
    draw(vao: VertexArrayObject, shaderProgram: ShaderProgram): void;
    releaseVAO(vao: VertexArrayObject): void;
    getUniformLocations<T extends Record<string, Uniform>>(program: WebGLProgram, uniforms: T): UniformLocations<T>;
    updateCommonUniforms(entity: Object3D, camera: Camera, shaderProgram: ShaderProgram): void;
    updateVRUniforms(shaderProgram: ShaderProgram, mvMatrix: mat4, pMatrix: mat4, eyeIndex: number): void;
    updateUniforms(shaderProgram: ShaderProgram): void;
    releaseShaderResources(shaderProgram: ShaderProgram): void;
    useProgram(shaderProgram: ShaderProgram): void;
    createProgram(vertexShader: string, fragmentShader: string): WebGLProgram;
    createWebGLTexture(texData: Texture): WebGLTexture;
    createWebGLCubeTexture(texData: Texture, size: number): WebGLTexture;
    makeXRCompatible(): Promise<void>;
    bindXRLayer(session: XRSession): void;
    bindXRFrame(frame: XRFrame): void;
    useDefaultFrameBuffer(): void;
    private _createBuffer;
    private _deleteBuffer;
    private _createNativeVAO;
    private _bindNativeVAO;
    private _deleteNativeVAO;
    private _supplyGeometryData;
    private _unbindBuffers;
    private _supplyIndiciesData;
    private _supplyAttributeData;
    private _compileShader;
    private _getCommonUniformLocations;
    private _getContext;
    private _onContextLost;
    private _onContextRestore;
}
export default WebGLContext;
