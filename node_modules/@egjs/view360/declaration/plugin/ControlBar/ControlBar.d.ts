import ControlBarItem, { ControlBarItemOptions } from "./ControlBarItem";
import { PieViewOptions } from "./PieView";
import { AutoHideOptions } from "./AutoHide";
import View360 from "../../View360";
import View360Plugin from "../View360Plugin";
import { ValueOf } from "../../type/utils";
export interface ControlBarOptions {
    autoHide: boolean | Partial<AutoHideOptions>;
    showBackground: boolean;
    clickToPlay: boolean;
    keyboardControls: boolean;
    progressBar: boolean | Partial<ControlBarItemOptions>;
    playButton: boolean | Partial<ControlBarItemOptions>;
    volumeButton: boolean | Partial<ControlBarItemOptions>;
    fullscreenButton: boolean | Partial<ControlBarItemOptions>;
    videoTime: boolean | Partial<ControlBarItemOptions>;
    pieView: boolean | Partial<PieViewOptions>;
    vrButton: boolean | Partial<ControlBarItemOptions>;
    gyroButton: boolean | Partial<ControlBarItemOptions>;
    className: Partial<{
        -readonly [key in keyof typeof ControlBar.DEFAULT_CLASS]: string;
    }>;
    customItems: ControlBarItem[];
}
declare class ControlBar implements View360Plugin {
    static readonly DEFAULT_CLASS: {
        readonly CONTROLS_ROOT: "view360-controls";
        readonly CONTROLS_BG: "view360-controls-background";
        readonly CONTROLS_MAIN: "view360-controls-main";
        readonly CONTROLS_TOP: "view360-controls-top";
        readonly CONTROLS_BOTTOM: "view360-controls-bottom";
        readonly CONTROLS_MID: "view360-controls-mid";
        readonly CONTROLS_LEFT: "view360-controls-left";
        readonly CONTROLS_RIGHT: "view360-controls-right";
        readonly CONTROLS_FLOAT_LEFT: "view360-controls-float-left";
        readonly CONTROLS_FLOAT_RIGHT: "view360-controls-float-right";
        readonly CONTROLS_BUTTON: "view360-controls-button";
        readonly PROGRESS_ROOT: "view360-controls-progress";
        readonly VOLUME_ROOT: "view360-controls-volume";
        readonly RANGE_ROOT: "view360-range";
        readonly RANGE_TRACK: "view360-range-track";
        readonly RANGE_THUMB: "view360-range-thumb";
        readonly RANGE_FILLER: "view360-range-filler";
        readonly PLAY_BUTTON: "view360-controls-play";
        readonly PAUSE_BUTTON: "view360-controls-pause";
        readonly UNMUTED_BUTTON: "view360-controls-unmuted";
        readonly MUTED_BUTTON: "view360-controls-muted";
        readonly FULLSCREEN_BUTTON: "view360-controls-fullscreen";
        readonly FULLSCREEN_EXIT_BUTTON: "view360-controls-fullscreen-exit";
        readonly VR_BUTTON: "view360-controls-vr";
        readonly GYRO_ENABLED: "view360-controls-gyro-enabled";
        readonly GYRO_DISABLED: "view360-controls-gyro-disabled";
        readonly VIDEO_TIME_DISPLAY: "view360-controls-time";
        readonly PIEVIEW_ROOT: "view360-controls-pie";
        readonly FIXED: "view360-controls-fixed";
        readonly UNAVAILABLE: "view360-controls-unavailable";
        readonly HIDDEN: "view360-controls-hidden";
    };
    static readonly POSITION: {
        readonly TOP_LEFT: "top-left";
        readonly TOP_RIGHT: "top-right";
        readonly MAIN_TOP: "main-top";
        readonly MAIN_BOTTOM: "main-bottom";
        readonly MAIN_LEFT: "main-left";
        readonly MAIN_RIGHT: "main-right";
    };
    readonly autoHide?: ControlBarOptions["autoHide"];
    readonly showBackground?: ControlBarOptions["showBackground"];
    readonly clickToPlay: ControlBarOptions["clickToPlay"];
    readonly keyboardControls: ControlBarOptions["keyboardControls"];
    readonly progressBar: ControlBarOptions["progressBar"];
    readonly playButton: ControlBarOptions["playButton"];
    readonly volumeButton: ControlBarOptions["volumeButton"];
    readonly fullscreenButton: ControlBarOptions["fullscreenButton"];
    readonly videoTime: ControlBarOptions["videoTime"];
    readonly pieView: ControlBarOptions["pieView"];
    readonly vrButton: ControlBarOptions["vrButton"];
    readonly gyroButton: ControlBarOptions["gyroButton"];
    readonly className: Required<ControlBarOptions["className"]>;
    get rootEl(): HTMLElement;
    get containerEl(): HTMLElement;
    get backgroundEl(): HTMLElement;
    get items(): Record<ValueOf<{
        readonly TOP_LEFT: "top-left";
        readonly TOP_RIGHT: "top-right";
        readonly MAIN_TOP: "main-top";
        readonly MAIN_BOTTOM: "main-bottom";
        readonly MAIN_LEFT: "main-left";
        readonly MAIN_RIGHT: "main-right";
    }>, ControlBarItem[]>;
    get customItems(): ControlBarItem[];
    private _rootEl;
    private _containerEl;
    private _bgEl;
    private _wrapperEl;
    private _items;
    private _customItems;
    private _autoHider;
    private _videoControl;
    constructor({ autoHide, showBackground, clickToPlay, keyboardControls, progressBar, playButton, volumeButton, fullscreenButton, videoTime, pieView, vrButton, gyroButton, className, customItems }?: Partial<ControlBarOptions>);
    init(viewer: View360): void;
    destroy(viewer: View360): void;
    private _addItem;
    private _createPositionWrappers;
    private _clearItemElements;
    private _onStaticClick;
    private _onNewSrcLoad;
    private _updateAutoHide;
    private _updateBackground;
    private _updateKeyboardHandler;
    private _createDefaultItems;
}
export default ControlBar;
