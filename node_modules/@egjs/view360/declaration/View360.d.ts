import Component from "@egjs/component";
import Camera, { CameraOptions } from "./core/Camera";
import PanoControl, { PanoControlOptions } from "./control/PanoControl";
import Autoplay, { AutoplayOptions } from "./core/Autoplay";
import TriangleMesh from "./core/TriangleMesh";
import XRManager from "./core/XRManager";
import Projection from "./projection/Projection";
import HotspotRenderer, { HotspotOptions } from "./hotspot/HotspotRenderer";
import WebGLRenderer from "./core/WebGLRenderer";
import View360Plugin from "./plugin/View360Plugin";
import { EVENTS } from "./const/external";
import * as EVENT_TYPES from "./type/events";
export interface View360Events {
    [EVENTS.READY]: EVENT_TYPES.ReadyEvent;
    [EVENTS.LOAD_START]: EVENT_TYPES.LoadStartEvent;
    [EVENTS.LOAD]: EVENT_TYPES.LoadEvent;
    [EVENTS.PROJECTION_CHANGE]: EVENT_TYPES.ProjectionChangeEvent;
    [EVENTS.RESIZE]: EVENT_TYPES.ResizeEvent;
    [EVENTS.BEFORE_RENDER]: EVENT_TYPES.BeforeRenderEvent;
    [EVENTS.RENDER]: EVENT_TYPES.RenderEvent;
    [EVENTS.INPUT_START]: EVENT_TYPES.InputStartEvent;
    [EVENTS.INPUT_END]: EVENT_TYPES.InputEndEvent;
    [EVENTS.VIEW_CHANGE]: EVENT_TYPES.ViewChangeEvent;
    [EVENTS.STATIC_CLICK]: EVENT_TYPES.StaticClickEvent;
    [EVENTS.VR_START]: EVENT_TYPES.VRStartEvent;
    [EVENTS.VR_END]: EVENT_TYPES.VREndEvent;
}
export interface View360Options extends CameraOptions, PanoControlOptions {
    projection: Projection | null;
    hotspot: Partial<HotspotOptions>;
    autoplay: boolean | Partial<AutoplayOptions>;
    autoInit: boolean;
    autoResize: boolean;
    canvasSelector: string;
    useResizeObserver: boolean;
    tabIndex: number | null;
    on: Partial<{
        [key in keyof View360Events]: (evt: View360Events[key]) => any;
    }>;
    plugins: View360Plugin[];
    maxDeltaTime: number;
    debug: boolean;
}
declare class View360 extends Component<View360Events> {
    static readonly VERSION = "#__VERSION__#";
    private _rootEl;
    private _renderer;
    private _camera;
    private _control;
    private _animator;
    private _autoplay;
    private _hotspot;
    private _projection;
    private _mesh;
    private _autoResizer;
    private _vr;
    private _plugins;
    private _initialized;
    private _autoInit;
    private _autoResize;
    private _canvasSelector;
    private _useResizeObserver;
    private _tabIndex;
    private _debug;
    get rootEl(): HTMLElement;
    get renderer(): WebGLRenderer;
    get camera(): Camera;
    get control(): PanoControl;
    get vr(): XRManager;
    get hotspot(): HotspotRenderer;
    get plugins(): View360Plugin[];
    get projection(): View360Options["projection"];
    set projection(val: View360Options["projection"]);
    get mesh(): TriangleMesh<{
        uTexture: import("./uniform/UniformCanvasCube").default | import("./uniform/UniformTexture2D").default | import("./uniform/UniformTextureCube").default;
    }>;
    get initialized(): boolean;
    get autoplay(): Autoplay;
    get autoInit(): boolean;
    get autoResize(): boolean;
    get canvasSelector(): string;
    get useResizeObserver(): boolean;
    get tabIndex(): View360Options["tabIndex"];
    set tabIndex(val: View360Options["tabIndex"]);
    get maxDeltaTime(): View360Options["maxDeltaTime"];
    set maxDeltaTime(val: View360Options["maxDeltaTime"]);
    get debug(): View360Options["debug"];
    set debug(val: View360Options["debug"]);
    get initialYaw(): View360Options["initialYaw"];
    set initialYaw(val: View360Options["initialYaw"]);
    get initialPitch(): View360Options["initialPitch"];
    set initialPitch(val: View360Options["initialPitch"]);
    get initialZoom(): View360Options["initialZoom"];
    set initialZoom(val: View360Options["initialZoom"]);
    get yawRange(): View360Options["yawRange"];
    set yawRange(val: View360Options["yawRange"]);
    get pitchRange(): View360Options["pitchRange"];
    set pitchRange(val: View360Options["pitchRange"]);
    get zoomRange(): View360Options["zoomRange"];
    set zoomRange(val: View360Options["zoomRange"]);
    get fov(): View360Options["fov"];
    set fov(val: View360Options["fov"]);
    get rotate(): import("./control/RotateControl").default;
    get zoom(): import("./control/ZoomControl").default;
    get gyro(): import("./control/GyroControl").default;
    get useGrabCursor(): View360Options["useGrabCursor"];
    set useGrabCursor(val: View360Options["useGrabCursor"]);
    get disableContextMenu(): View360Options["disableContextMenu"];
    set disableContextMenu(val: View360Options["disableContextMenu"]);
    get scrollable(): View360Options["scrollable"];
    set scrollable(val: View360Options["scrollable"]);
    get wheelScrollable(): View360Options["wheelScrollable"];
    set wheelScrollable(val: View360Options["wheelScrollable"]);
    constructor(root: string | HTMLElement, { projection, initialYaw, initialPitch, initialZoom, yawRange, pitchRange, zoomRange, fov, useGrabCursor, disableContextMenu, rotate, zoom, gyro, scrollable, wheelScrollable, autoplay, hotspot, autoInit, autoResize, canvasSelector, useResizeObserver, on, plugins, maxDeltaTime, tabIndex, debug }?: Partial<View360Options>);
    destroy(): void;
    init(): Promise<void>;
    load(projection: Projection): Promise<boolean>;
    resize(): void;
    addPlugins(...plugins: View360Plugin[]): void;
    removePlugins(...plugins: View360Plugin[]): void;
    renderFrame: (delta: number) => void;
    private _emit;
    private _renderFrameOnDemand;
    private _renderVRFrame;
    private _applyProjection;
    private _loadTexture;
    private _resizeComponents;
    private _addEventHandlers;
    private _bindComponentEvents;
}
export default View360;
