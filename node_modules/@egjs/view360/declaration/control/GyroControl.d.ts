import Component from "@egjs/component";
import CameraControl from "./CameraControl";
import Motion from "../core/Motion";
import Camera from "../core/Camera";
import { ControlEvents } from "../type/internal";
export interface GyroControlOptions {
    ignoreRoll: boolean;
}
export type GyroControlEvents = ControlEvents<void>;
declare class GyroControl extends Component<GyroControlEvents> implements CameraControl {
    private _ignoreRoll;
    private _enableBlocked;
    private _input;
    get enabled(): boolean;
    get enableBlocked(): boolean;
    get animating(): boolean;
    get ignoreRoll(): GyroControlOptions["ignoreRoll"];
    set ignoreRoll(val: GyroControlOptions["ignoreRoll"]);
    static isAvailable(): Promise<boolean>;
    static requestSensorPermission(): Promise<boolean>;
    constructor(enableBlocked: boolean, { ignoreRoll }?: Partial<GyroControlOptions>);
    destroy(): void;
    update(camera: Camera, yaw: Motion, pitch: Motion, zoom: number): void;
    enable(): void;
    disable(): void;
    sync(): void;
    private _updateYawPitch;
    private _updateQuaternion;
}
export default GyroControl;
