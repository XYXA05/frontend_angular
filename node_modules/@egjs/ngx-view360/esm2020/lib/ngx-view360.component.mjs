/**
 * Copyright (c) 2023-present NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
import { Component, Input, ElementRef, Output, EventEmitter, NgZone, Inject, PLATFORM_ID, ViewChild, } from "@angular/core";
import { isPlatformServer } from "@angular/common";
import { fromEvent, Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";
import VanillaView360, { EVENTS, DEFAULT_CLASS } from "@egjs/view360";
import View360Interface from "./View360Interface";
import { setterNames } from "./const";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class NgxView360Component extends View360Interface {
    constructor(_elRef, _platformId, _ngZone) {
        super();
        this._elRef = _elRef;
        this._platformId = _platformId;
        this._ngZone = _ngZone;
        this.readyEmitter = new EventEmitter();
        this.loadStartEmitter = new EventEmitter();
        this.loadEmitter = new EventEmitter();
        this.projectionChangeEmitter = new EventEmitter();
        this.resizeEmitter = new EventEmitter();
        this.beforeRenderEmitter = new EventEmitter();
        this.renderEmitter = new EventEmitter();
        this.inputStartEmitter = new EventEmitter();
        this.inputEndEmitter = new EventEmitter();
        this.viewChangeEmitter = new EventEmitter();
        this.staticClickEmitter = new EventEmitter();
        this.vrStartEmitter = new EventEmitter();
        this.vrEndEmitter = new EventEmitter();
        this._destroy$ = new Subject();
        this._view360 = null;
    }
    get element() { return this._elRef.nativeElement; }
    get _canvasElClass() { return `${DEFAULT_CLASS.CANVAS} ${this.canvasClass ?? ""}`.trim(); }
    ngAfterViewInit() {
        if (isPlatformServer(this._platformId))
            return;
        const container = this._elRef.nativeElement;
        const options = this.options ?? {};
        this._view360 = this._ngZone.runOutsideAngular(() => new VanillaView360(container, options));
        this._bindEvents();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._view360?.destroy();
    }
    ngOnChanges(changes) {
        const view360 = this._view360;
        if (!view360)
            return;
        const changed = changes.options;
        if (!changed)
            return;
        const prev = changed.previousValue;
        const current = changed.currentValue;
        setterNames.forEach(name => {
            const oldProp = prev[name];
            const newProp = current[name];
            if (newProp !== oldProp) {
                view360[name] = newProp;
            }
        });
    }
    _bindEvents() {
        const view360 = this._view360;
        Object.keys(EVENTS).forEach(evtKey => {
            const evtName = EVENTS[evtKey];
            fromEvent(view360, evtName)
                .pipe(takeUntil(this._destroy$))
                .subscribe(event => {
                const emitter = this[`${evtName}Emitter`];
                if (emitter && emitter.observers.length > 0) {
                    this._ngZone.run(() => emitter.emit(event));
                }
            });
        });
    }
}
NgxView360Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: NgxView360Component, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NgxView360Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: NgxView360Component, selector: "ngx-view360, [NgxView360]", inputs: { options: "options", canvasClass: "canvasClass" }, outputs: { readyEmitter: "ready", loadStartEmitter: "loadStart", loadEmitter: "load", projectionChangeEmitter: "projectionChange", resizeEmitter: "resize", beforeRenderEmitter: "beforeRender", renderEmitter: "render", inputStartEmitter: "inputStart", inputEndEmitter: "inputEnd", viewChangeEmitter: "viewChange", staticClickEmitter: "staticClick", vrStartEmitter: "vrStart", vrEndEmitter: "vrEnd" }, host: { styleAttribute: "display: block;", classAttribute: "view360-container" }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <canvas #canvas [ngClass]="_canvasElClass"></canvas>
    <ng-content></ng-content>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: NgxView360Component, decorators: [{
            type: Component,
            args: [{
                    selector: "ngx-view360, [NgxView360]",
                    template: `
    <canvas #canvas [ngClass]="_canvasElClass"></canvas>
    <ng-content></ng-content>
  `,
                    host: {
                        style: "display: block;",
                        class: "view360-container"
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], canvasClass: [{
                type: Input
            }], readyEmitter: [{
                type: Output,
                args: ["ready"]
            }], loadStartEmitter: [{
                type: Output,
                args: ["loadStart"]
            }], loadEmitter: [{
                type: Output,
                args: ["load"]
            }], projectionChangeEmitter: [{
                type: Output,
                args: ["projectionChange"]
            }], resizeEmitter: [{
                type: Output,
                args: ["resize"]
            }], beforeRenderEmitter: [{
                type: Output,
                args: ["beforeRender"]
            }], renderEmitter: [{
                type: Output,
                args: ["render"]
            }], inputStartEmitter: [{
                type: Output,
                args: ["inputStart"]
            }], inputEndEmitter: [{
                type: Output,
                args: ["inputEnd"]
            }], viewChangeEmitter: [{
                type: Output,
                args: ["viewChange"]
            }], staticClickEmitter: [{
                type: Output,
                args: ["staticClick"]
            }], vrStartEmitter: [{
                type: Output,
                args: ["vrStart"]
            }], vrEndEmitter: [{
                type: Output,
                args: ["vrEnd"]
            }], canvas: [{
                type: ViewChild,
                args: ["canvas"]
            }] } });
//# sourceMappingURL=data:application/json;base64,