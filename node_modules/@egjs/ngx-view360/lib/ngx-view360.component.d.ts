/**
 * Copyright (c) 2023-present NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
import { AfterViewInit, ElementRef, OnChanges, EventEmitter, OnDestroy, NgZone, SimpleChanges } from "@angular/core";
import { ReadyEvent, LoadStartEvent, LoadEvent, ProjectionChangeEvent, ResizeEvent, BeforeRenderEvent, RenderEvent, InputStartEvent, InputEndEvent, ViewChangeEvent, StaticClickEvent, VRStartEvent, VREndEvent, View360Options } from "@egjs/view360";
import View360Interface from "./View360Interface";
import * as i0 from "@angular/core";
export declare class NgxView360Component extends View360Interface implements AfterViewInit, OnDestroy, OnChanges {
    private _elRef;
    private _platformId;
    private _ngZone;
    options: Partial<View360Options>;
    canvasClass: string;
    readyEmitter: EventEmitter<ReadyEvent>;
    loadStartEmitter: EventEmitter<LoadStartEvent>;
    loadEmitter: EventEmitter<LoadEvent>;
    projectionChangeEmitter: EventEmitter<ProjectionChangeEvent>;
    resizeEmitter: EventEmitter<ResizeEvent>;
    beforeRenderEmitter: EventEmitter<BeforeRenderEvent>;
    renderEmitter: EventEmitter<RenderEvent>;
    inputStartEmitter: EventEmitter<InputStartEvent>;
    inputEndEmitter: EventEmitter<InputEndEvent>;
    viewChangeEmitter: EventEmitter<ViewChangeEvent>;
    staticClickEmitter: EventEmitter<StaticClickEvent>;
    vrStartEmitter: EventEmitter<VRStartEvent>;
    vrEndEmitter: EventEmitter<VREndEvent>;
    canvas: ElementRef<HTMLCanvasElement>;
    get element(): HTMLElement;
    get _canvasElClass(): string;
    private _destroy$;
    constructor(_elRef: ElementRef<HTMLElement>, _platformId: any, _ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _bindEvents;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxView360Component, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxView360Component, "ngx-view360, [NgxView360]", never, { "options": "options"; "canvasClass": "canvasClass"; }, { "readyEmitter": "ready"; "loadStartEmitter": "loadStart"; "loadEmitter": "load"; "projectionChangeEmitter": "projectionChange"; "resizeEmitter": "resize"; "beforeRenderEmitter": "beforeRender"; "renderEmitter": "render"; "inputStartEmitter": "inputStart"; "inputEndEmitter": "inputEnd"; "viewChangeEmitter": "viewChange"; "staticClickEmitter": "staticClick"; "vrStartEmitter": "vrStart"; "vrEndEmitter": "vrEnd"; }, never, ["*"], false, never>;
}
