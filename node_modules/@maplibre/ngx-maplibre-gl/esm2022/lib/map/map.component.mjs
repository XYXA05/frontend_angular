import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, afterNextRender, } from '@angular/core';
import { MapService } from './map.service';
import { firstValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./map.service";
/**
 * `mgl-map` - The main map component
 * @see [Map](https://maplibre.org/maplibre-gl-js/docs/API/classes/Map/)
 *
 * @category Map Component
 *
 * @example
 * ```typescript
 * ...
 * @Component({
 *   template: `
 *   <mgl-map
 *     [style]="'https://demotiles.maplibre.org/style.json'"
 *     [zoom]="[9]"
 *     [center]="[-74.50, 40]"
 *     (mapLoad)="map = $event"
 *   ></mgl-map>
 *   `,
 * ...
 * })
 * export class DisplayMapComponent {
 *   map: Map; // MapLibre GL Map object (MapLibre is ran outside angular zone, keep that in mind when binding events from this object)
 * ...
 * }
 * ```
 */
export class MapComponent {
    get mapInstance() {
        return this.mapService.mapInstance;
    }
    constructor(mapService, elementRef) {
        this.mapService = mapService;
        this.elementRef = elementRef;
        /** Added by ngx-mapbox-gl */
        this.movingMethod = 'flyTo';
        this.mapResize = new EventEmitter();
        this.mapRemove = new EventEmitter();
        this.mapMouseDown = new EventEmitter();
        this.mapMouseUp = new EventEmitter();
        this.mapMouseMove = new EventEmitter();
        this.mapClick = new EventEmitter();
        this.mapDblClick = new EventEmitter();
        this.mapMouseOver = new EventEmitter();
        this.mapMouseOut = new EventEmitter();
        this.mapContextMenu = new EventEmitter();
        this.mapTouchStart = new EventEmitter();
        this.mapTouchEnd = new EventEmitter();
        this.mapTouchMove = new EventEmitter();
        this.mapTouchCancel = new EventEmitter();
        this.mapWheel = new EventEmitter();
        this.moveStart = new EventEmitter();
        this.move = new EventEmitter();
        this.moveEnd = new EventEmitter();
        this.mapDragStart = new EventEmitter();
        this.mapDrag = new EventEmitter();
        this.mapDragEnd = new EventEmitter();
        this.zoomStart = new EventEmitter();
        this.zoomEvt = new EventEmitter();
        this.zoomEnd = new EventEmitter();
        this.rotateStart = new EventEmitter();
        this.rotate = new EventEmitter();
        this.rotateEnd = new EventEmitter();
        this.pitchStart = new EventEmitter();
        this.pitchEvt = new EventEmitter();
        this.pitchEnd = new EventEmitter();
        this.boxZoomStart = new EventEmitter();
        this.boxZoomEnd = new EventEmitter();
        this.boxZoomCancel = new EventEmitter();
        this.webGlContextLost = new EventEmitter();
        this.webGlContextRestored = new EventEmitter();
        this.mapLoad = new EventEmitter();
        this.idle = new EventEmitter();
        this.render = new EventEmitter();
        this.mapError = new EventEmitter();
        this.data = new EventEmitter();
        this.styleData = new EventEmitter();
        this.sourceData = new EventEmitter();
        this.dataLoading = new EventEmitter();
        this.styleDataLoading = new EventEmitter();
        this.sourceDataLoading = new EventEmitter();
        this.styleImageMissing = new EventEmitter();
        this.subscriptions = [];
        afterNextRender(() => {
            if (this.preserveDrawingBuffer) {
                // This is to allow better interaction with the map state
                const htmlElement = this.elementRef.nativeElement;
                htmlElement.setAttribute('data-cy', 'map');
                this.subscriptions.push(this.mapLoad.subscribe(() => {
                    htmlElement.setAttribute('data-loaded', 'true');
                }));
                this.subscriptions.push(this.idle.subscribe(() => {
                    htmlElement.setAttribute('data-idle', 'true');
                }));
                this.subscriptions.push(this.render.subscribe(() => {
                    htmlElement.removeAttribute('data-idle');
                }));
            }
            this.mapService.setup({
                mapOptions: {
                    collectResourceTiming: this.collectResourceTiming,
                    container: this.mapContainer.nativeElement,
                    crossSourceCollisions: this.crossSourceCollisions,
                    fadeDuration: this.fadeDuration,
                    minZoom: this.minZoom,
                    maxZoom: this.maxZoom,
                    minPitch: this.minPitch,
                    maxPitch: this.maxPitch,
                    style: this.style,
                    hash: this.hash,
                    interactive: this.interactive,
                    bearingSnap: this.bearingSnap,
                    pitchWithRotate: this.pitchWithRotate,
                    clickTolerance: this.clickTolerance,
                    attributionControl: this.attributionControl,
                    logoPosition: this.logoPosition,
                    failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,
                    preserveDrawingBuffer: this.preserveDrawingBuffer,
                    refreshExpiredTiles: this.refreshExpiredTiles,
                    maxBounds: this.maxBounds,
                    scrollZoom: this.scrollZoom,
                    boxZoom: this.boxZoom,
                    dragRotate: this.dragRotate,
                    dragPan: this.dragPan,
                    keyboard: this.keyboard,
                    doubleClickZoom: this.doubleClickZoom,
                    touchPitch: this.touchPitch,
                    touchZoomRotate: this.touchZoomRotate,
                    trackResize: this.trackResize,
                    center: this.center,
                    zoom: this.zoom,
                    bearing: this.bearing,
                    pitch: this.pitch,
                    renderWorldCopies: this.renderWorldCopies,
                    maxTileCacheSize: this.maxTileCacheSize,
                    localIdeographFontFamily: this.localIdeographFontFamily,
                    transformRequest: this.transformRequest,
                    bounds: this.bounds ? this.bounds : this.fitBounds,
                    fitBoundsOptions: this.fitBoundsOptions,
                    antialias: this.antialias,
                    locale: this.locale,
                    cooperativeGestures: this.cooperativeGestures,
                    terrain: this.terrain,
                },
                mapEvents: this,
            });
            if (this.cursorStyle) {
                this.mapService.changeCanvasCursor(this.cursorStyle);
            }
        });
    }
    ngOnDestroy() {
        this.mapService.destroyMap();
        for (const subscription of this.subscriptions) {
            subscription.unsubscribe();
        }
    }
    async ngOnChanges(changes) {
        await firstValueFrom(this.mapService.mapCreated$);
        if (changes.cursorStyle && !changes.cursorStyle.isFirstChange()) {
            this.mapService.changeCanvasCursor(changes.cursorStyle.currentValue);
        }
        if (changes.minZoom && !changes.minZoom.isFirstChange()) {
            this.mapService.updateMinZoom(changes.minZoom.currentValue);
        }
        if (changes.maxZoom && !changes.maxZoom.isFirstChange()) {
            this.mapService.updateMaxZoom(changes.maxZoom.currentValue);
        }
        if (changes.minPitch && !changes.minPitch.isFirstChange()) {
            this.mapService.updateMinPitch(changes.minPitch.currentValue);
        }
        if (changes.maxPitch && !changes.maxPitch.isFirstChange()) {
            this.mapService.updateMaxPitch(changes.maxPitch.currentValue);
        }
        if (changes.renderWorldCopies &&
            !changes.renderWorldCopies.isFirstChange()) {
            this.mapService.updateRenderWorldCopies(changes.renderWorldCopies.currentValue);
        }
        if (changes.scrollZoom && !changes.scrollZoom.isFirstChange()) {
            this.mapService.updateScrollZoom(changes.scrollZoom.currentValue);
        }
        if (changes.dragRotate && !changes.dragRotate.isFirstChange()) {
            this.mapService.updateDragRotate(changes.dragRotate.currentValue);
        }
        if (changes.touchPitch && !changes.touchPitch.isFirstChange()) {
            this.mapService.updateTouchPitch(changes.touchPitch.currentValue);
        }
        if (changes.touchZoomRotate && !changes.touchZoomRotate.isFirstChange()) {
            this.mapService.updateTouchZoomRotate(changes.touchZoomRotate.currentValue);
        }
        if (changes.doubleClickZoom && !changes.doubleClickZoom.isFirstChange()) {
            this.mapService.updateDoubleClickZoom(changes.doubleClickZoom.currentValue);
        }
        if (changes.keyboard && !changes.keyboard.isFirstChange()) {
            this.mapService.updateKeyboard(changes.keyboard.currentValue);
        }
        if (changes.dragPan && !changes.dragPan.isFirstChange()) {
            this.mapService.updateDragPan(changes.dragPan.currentValue);
        }
        if (changes.boxZoom && !changes.boxZoom.isFirstChange()) {
            this.mapService.updateBoxZoom(changes.boxZoom.currentValue);
        }
        if (changes.style && !changes.style.isFirstChange()) {
            this.mapService.updateStyle(changes.style.currentValue);
        }
        if (changes.maxBounds && !changes.maxBounds.isFirstChange()) {
            this.mapService.updateMaxBounds(changes.maxBounds.currentValue);
        }
        if (changes.fitBounds &&
            changes.fitBounds.currentValue &&
            !changes.fitBounds.isFirstChange()) {
            this.mapService.fitBounds(changes.fitBounds.currentValue, this.fitBoundsOptions);
        }
        if (changes.fitScreenCoordinates &&
            changes.fitScreenCoordinates.currentValue) {
            if ((this.center || this.zoom || this.pitch || this.fitBounds) &&
                changes.fitScreenCoordinates.isFirstChange()) {
                console.warn('[ngx-maplibre-gl] center / zoom / pitch / fitBounds inputs are being overridden by fitScreenCoordinates input');
            }
            this.mapService.fitScreenCoordinates(changes.fitScreenCoordinates.currentValue, this.bearing ? this.bearing[0] : 0, this.movingOptions);
        }
        if (this.centerWithPanTo &&
            changes.center &&
            !changes.center.isFirstChange() &&
            !changes.zoom &&
            !changes.bearing &&
            !changes.pitch) {
            this.mapService.panTo(this.center, this.panToOptions);
        }
        else if ((changes.center && !changes.center.isFirstChange()) ||
            (changes.zoom && !changes.zoom.isFirstChange()) ||
            (changes.bearing &&
                !changes.bearing.isFirstChange() &&
                !changes.fitScreenCoordinates) ||
            (changes.pitch && !changes.pitch.isFirstChange())) {
            this.mapService.move(this.movingMethod, this.movingOptions, changes.zoom && this.zoom ? this.zoom[0] : undefined, changes.center ? this.center : undefined, changes.bearing && this.bearing ? this.bearing[0] : undefined, changes.pitch && this.pitch ? this.pitch[0] : undefined);
        }
        if (changes.terrain && !changes.terrain.isFirstChange()) {
            this.mapService.updateTerrain(changes.terrain.currentValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: MapComponent, deps: [{ token: i1.MapService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: MapComponent, isStandalone: true, selector: "mgl-map", inputs: { collectResourceTiming: "collectResourceTiming", crossSourceCollisions: "crossSourceCollisions", customMapboxApiUrl: "customMapboxApiUrl", fadeDuration: "fadeDuration", hash: "hash", refreshExpiredTiles: "refreshExpiredTiles", failIfMajorPerformanceCaveat: "failIfMajorPerformanceCaveat", bearingSnap: "bearingSnap", interactive: "interactive", pitchWithRotate: "pitchWithRotate", clickTolerance: "clickTolerance", attributionControl: "attributionControl", logoPosition: "logoPosition", maxTileCacheSize: "maxTileCacheSize", localIdeographFontFamily: "localIdeographFontFamily", preserveDrawingBuffer: "preserveDrawingBuffer", trackResize: "trackResize", transformRequest: "transformRequest", bounds: "bounds", antialias: "antialias", locale: "locale", cooperativeGestures: "cooperativeGestures", minZoom: "minZoom", maxZoom: "maxZoom", minPitch: "minPitch", maxPitch: "maxPitch", scrollZoom: "scrollZoom", dragRotate: "dragRotate", touchPitch: "touchPitch", touchZoomRotate: "touchZoomRotate", doubleClickZoom: "doubleClickZoom", keyboard: "keyboard", dragPan: "dragPan", boxZoom: "boxZoom", style: "style", center: "center", maxBounds: "maxBounds", zoom: "zoom", bearing: "bearing", pitch: "pitch", fitBoundsOptions: "fitBoundsOptions", renderWorldCopies: "renderWorldCopies", terrain: "terrain", movingMethod: "movingMethod", movingOptions: "movingOptions", fitBounds: "fitBounds", fitScreenCoordinates: "fitScreenCoordinates", centerWithPanTo: "centerWithPanTo", panToOptions: "panToOptions", cursorStyle: "cursorStyle" }, outputs: { mapResize: "mapResize", mapRemove: "mapRemove", mapMouseDown: "mapMouseDown", mapMouseUp: "mapMouseUp", mapMouseMove: "mapMouseMove", mapClick: "mapClick", mapDblClick: "mapDblClick", mapMouseOver: "mapMouseOver", mapMouseOut: "mapMouseOut", mapContextMenu: "mapContextMenu", mapTouchStart: "mapTouchStart", mapTouchEnd: "mapTouchEnd", mapTouchMove: "mapTouchMove", mapTouchCancel: "mapTouchCancel", mapWheel: "mapWheel", moveStart: "moveStart", move: "move", moveEnd: "moveEnd", mapDragStart: "mapDragStart", mapDrag: "mapDrag", mapDragEnd: "mapDragEnd", zoomStart: "zoomStart", zoomEvt: "zoomEvt", zoomEnd: "zoomEnd", rotateStart: "rotateStart", rotate: "rotate", rotateEnd: "rotateEnd", pitchStart: "pitchStart", pitchEvt: "pitchEvt", pitchEnd: "pitchEnd", boxZoomStart: "boxZoomStart", boxZoomEnd: "boxZoomEnd", boxZoomCancel: "boxZoomCancel", webGlContextLost: "webGlContextLost", webGlContextRestored: "webGlContextRestored", mapLoad: "mapLoad", idle: "idle", render: "render", mapError: "mapError", data: "data", styleData: "styleData", sourceData: "sourceData", dataLoading: "dataLoading", styleDataLoading: "styleDataLoading", sourceDataLoading: "sourceDataLoading", styleImageMissing: "styleImageMissing" }, providers: [MapService], viewQueries: [{ propertyName: "mapContainer", first: true, predicate: ["container"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #container></div>', isInline: true, styles: [":host{display:block}div{height:100%;width:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: MapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mgl-map', template: '<div #container></div>', providers: [MapService], changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, styles: [":host{display:block}div{height:100%;width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1.MapService }, { type: i0.ElementRef }], propDecorators: { collectResourceTiming: [{
                type: Input
            }], crossSourceCollisions: [{
                type: Input
            }], customMapboxApiUrl: [{
                type: Input
            }], fadeDuration: [{
                type: Input
            }], hash: [{
                type: Input
            }], refreshExpiredTiles: [{
                type: Input
            }], failIfMajorPerformanceCaveat: [{
                type: Input
            }], bearingSnap: [{
                type: Input
            }], interactive: [{
                type: Input
            }], pitchWithRotate: [{
                type: Input
            }], clickTolerance: [{
                type: Input
            }], attributionControl: [{
                type: Input
            }], logoPosition: [{
                type: Input
            }], maxTileCacheSize: [{
                type: Input
            }], localIdeographFontFamily: [{
                type: Input
            }], preserveDrawingBuffer: [{
                type: Input
            }], trackResize: [{
                type: Input
            }], transformRequest: [{
                type: Input
            }], bounds: [{
                type: Input
            }], antialias: [{
                type: Input
            }], locale: [{
                type: Input
            }], cooperativeGestures: [{
                type: Input
            }], minZoom: [{
                type: Input
            }], maxZoom: [{
                type: Input
            }], minPitch: [{
                type: Input
            }], maxPitch: [{
                type: Input
            }], scrollZoom: [{
                type: Input
            }], dragRotate: [{
                type: Input
            }], touchPitch: [{
                type: Input
            }], touchZoomRotate: [{
                type: Input
            }], doubleClickZoom: [{
                type: Input
            }], keyboard: [{
                type: Input
            }], dragPan: [{
                type: Input
            }], boxZoom: [{
                type: Input
            }], style: [{
                type: Input
            }], center: [{
                type: Input
            }], maxBounds: [{
                type: Input
            }], zoom: [{
                type: Input
            }], bearing: [{
                type: Input
            }], pitch: [{
                type: Input
            }], fitBoundsOptions: [{
                type: Input
            }], renderWorldCopies: [{
                type: Input
            }], terrain: [{
                type: Input
            }], movingMethod: [{
                type: Input
            }], movingOptions: [{
                type: Input
            }], fitBounds: [{
                type: Input
            }], fitScreenCoordinates: [{
                type: Input
            }], centerWithPanTo: [{
                type: Input
            }], panToOptions: [{
                type: Input
            }], cursorStyle: [{
                type: Input
            }], mapResize: [{
                type: Output
            }], mapRemove: [{
                type: Output
            }], mapMouseDown: [{
                type: Output
            }], mapMouseUp: [{
                type: Output
            }], mapMouseMove: [{
                type: Output
            }], mapClick: [{
                type: Output
            }], mapDblClick: [{
                type: Output
            }], mapMouseOver: [{
                type: Output
            }], mapMouseOut: [{
                type: Output
            }], mapContextMenu: [{
                type: Output
            }], mapTouchStart: [{
                type: Output
            }], mapTouchEnd: [{
                type: Output
            }], mapTouchMove: [{
                type: Output
            }], mapTouchCancel: [{
                type: Output
            }], mapWheel: [{
                type: Output
            }], moveStart: [{
                type: Output
            }], move: [{
                type: Output
            }], moveEnd: [{
                type: Output
            }], mapDragStart: [{
                type: Output
            }], mapDrag: [{
                type: Output
            }], mapDragEnd: [{
                type: Output
            }], zoomStart: [{
                type: Output
            }], zoomEvt: [{
                type: Output
            }], zoomEnd: [{
                type: Output
            }], rotateStart: [{
                type: Output
            }], rotate: [{
                type: Output
            }], rotateEnd: [{
                type: Output
            }], pitchStart: [{
                type: Output
            }], pitchEvt: [{
                type: Output
            }], pitchEnd: [{
                type: Output
            }], boxZoomStart: [{
                type: Output
            }], boxZoomEnd: [{
                type: Output
            }], boxZoomCancel: [{
                type: Output
            }], webGlContextLost: [{
                type: Output
            }], webGlContextRestored: [{
                type: Output
            }], mapLoad: [{
                type: Output
            }], idle: [{
                type: Output
            }], render: [{
                type: Output
            }], mapError: [{
                type: Output
            }], data: [{
                type: Output
            }], styleData: [{
                type: Output
            }], sourceData: [{
                type: Output
            }], dataLoading: [{
                type: Output
            }], styleDataLoading: [{
                type: Output
            }], sourceDataLoading: [{
                type: Output
            }], styleImageMissing: [{
                type: Output
            }], mapContainer: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,