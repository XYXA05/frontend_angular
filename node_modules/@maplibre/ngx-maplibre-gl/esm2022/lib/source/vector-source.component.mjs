import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { fromEvent, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../map/map.service";
/**
 * `mgl-vector-source` - a vector source component
 * @see [vector](https://maplibre.org/maplibre-style-spec/sources/#vector)
 *
 * @category Source Components
 */
export class VectorSourceComponent {
    constructor(mapService) {
        this.mapService = mapService;
        this.type = 'vector';
        this.sourceAdded = false;
        this.sub = new Subscription();
    }
    ngOnInit() {
        const sub1 = this.mapService.mapLoaded$.subscribe(() => {
            this.init();
            const sub = fromEvent(this.mapService.mapInstance, 'styledata')
                .pipe(filter(() => !this.mapService.mapInstance.getSource(this.id)))
                .subscribe(() => {
                this.init();
            });
            this.sub.add(sub);
        });
        this.sub.add(sub1);
    }
    ngOnChanges(changes) {
        if (!this.sourceAdded) {
            return;
        }
        if ((changes.bounds && !changes.bounds.isFirstChange()) ||
            (changes.scheme && !changes.scheme.isFirstChange()) ||
            (changes.minzoom && !changes.minzoom.isFirstChange()) ||
            (changes.maxzoom && !changes.maxzoom.isFirstChange()) ||
            (changes.attribution && !changes.attribution.isFirstChange()) ||
            (changes.promoteId && !changes.promoteId.isFirstChange())) {
            this.ngOnDestroy();
            this.ngOnInit();
        }
        else if ((changes.url && !changes.url.isFirstChange()) ||
            (changes.tiles && !changes.tiles.isFirstChange())) {
            const source = this.mapService.getSource(this.id);
            if (source === undefined) {
                return;
            }
            if (changes.url && this.url) {
                source.setUrl(this.url);
            }
            if (changes.tiles && this.tiles) {
                source.setTiles(this.tiles);
            }
        }
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
        if (this.sourceAdded) {
            this.mapService.removeSource(this.id);
            this.sourceAdded = false;
        }
    }
    init() {
        const source = {
            type: this.type,
            url: this.url,
            tiles: this.tiles,
            bounds: this.bounds,
            scheme: this.scheme,
            minzoom: this.minzoom,
            maxzoom: this.maxzoom,
            attribution: this.attribution,
            promoteId: this.promoteId,
        };
        this.mapService.addSource(this.id, source);
        this.sourceAdded = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: VectorSourceComponent, deps: [{ token: i1.MapService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: VectorSourceComponent, isStandalone: true, selector: "mgl-vector-source", inputs: { id: "id", url: "url", tiles: "tiles", bounds: "bounds", scheme: "scheme", minzoom: "minzoom", maxzoom: "maxzoom", attribution: "attribution", promoteId: "promoteId" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: VectorSourceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'mgl-vector-source',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i1.MapService }], propDecorators: { id: [{
                type: Input
            }], url: [{
                type: Input
            }], tiles: [{
                type: Input
            }], bounds: [{
                type: Input
            }], scheme: [{
                type: Input
            }], minzoom: [{
                type: Input
            }], maxzoom: [{
                type: Input
            }], attribution: [{
                type: Input
            }], promoteId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,