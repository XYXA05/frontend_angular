import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { LayerSpecification, FilterSpecification } from 'maplibre-gl';
import { MapService } from '../map/map.service';
import { EventData, LayerEvents } from '../map/map.types';
import * as i0 from "@angular/core";
/**
 * `mgl-layer` - a layer component
 * @see [layers](https://maplibre.org/maplibre-style-spec/layers/)
 *
 * @category Layer Component
 *
 * @example
 * ```html
 * ...
 * <mgl-map ...>
 *   <mgl-layer
 *     id="state-borders"
 *     type="line"
 *     [source]="states"
 *     [paint]="{
 *       'line-color': '#627BC1',
 *       'line-width': 2
 *     }"
 *   ></mgl-layer>
 * </mgl-map>
 * ```
 */
export declare class LayerComponent implements OnInit, OnDestroy, OnChanges, LayerEvents {
    private mapService;
    /** Init input */
    id: LayerSpecification['id'];
    /** Init input */
    source?: string;
    /** Init input */
    type: LayerSpecification['type'];
    /** Init input */
    metadata?: LayerSpecification['metadata'];
    /** Init input */
    sourceLayer?: string;
    /**
     * A flag to enable removeSource clean up functionality
     *
     * Init input
     */
    removeSource?: boolean;
    /** Dynamic input */
    filter?: FilterSpecification;
    /** Dynamic input */
    layout?: LayerSpecification['layout'];
    /** Dynamic input */
    paint?: LayerSpecification['paint'];
    /** Dynamic input */
    before?: string;
    /** Dynamic input */
    minzoom?: LayerSpecification['minzoom'];
    /** Dynamic input */
    maxzoom?: LayerSpecification['maxzoom'];
    layerClick: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerDblClick: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseDown: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseUp: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseEnter: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseLeave: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseMove: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseOver: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseOut: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerContextMenu: EventEmitter<import("maplibre-gl").MapMouseEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerTouchStart: EventEmitter<import("maplibre-gl").MapTouchEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerTouchEnd: EventEmitter<import("maplibre-gl").MapTouchEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    layerTouchCancel: EventEmitter<import("maplibre-gl").MapTouchEvent & {
        features?: import("maplibre-gl").MapGeoJSONFeature[] | undefined;
    } & EventData>;
    private layerAdded;
    private sub;
    private sourceIdAdded?;
    constructor(mapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private init;
    static ɵfac: i0.ɵɵFactoryDeclaration<LayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LayerComponent, "mgl-layer", never, { "id": { "alias": "id"; "required": false; }; "source": { "alias": "source"; "required": false; }; "type": { "alias": "type"; "required": false; }; "metadata": { "alias": "metadata"; "required": false; }; "sourceLayer": { "alias": "sourceLayer"; "required": false; }; "removeSource": { "alias": "removeSource"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "layout": { "alias": "layout"; "required": false; }; "paint": { "alias": "paint"; "required": false; }; "before": { "alias": "before"; "required": false; }; "minzoom": { "alias": "minzoom"; "required": false; }; "maxzoom": { "alias": "maxzoom"; "required": false; }; }, { "layerClick": "layerClick"; "layerDblClick": "layerDblClick"; "layerMouseDown": "layerMouseDown"; "layerMouseUp": "layerMouseUp"; "layerMouseEnter": "layerMouseEnter"; "layerMouseLeave": "layerMouseLeave"; "layerMouseMove": "layerMouseMove"; "layerMouseOver": "layerMouseOver"; "layerMouseOut": "layerMouseOut"; "layerContextMenu": "layerContextMenu"; "layerTouchStart": "layerTouchStart"; "layerTouchEnd": "layerTouchEnd"; "layerTouchCancel": "layerTouchCancel"; }, never, never, true, never>;
}
