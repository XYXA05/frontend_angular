import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { LngLatLike, Marker, MarkerOptions } from 'maplibre-gl';
import { MapService } from '../map/map.service';
import * as i0 from "@angular/core";
/**
 * `mgl-marker` - a marker component
 * @see [Marker](https://maplibre.org/maplibre-gl-js/docs/API/classes/Marker/)
 *
 * @category Components
 *
 * @example
 * ```html
 * ...
 * <mgl-map ...>
 *   <mgl-marker [lngLat]="[-66.324462890625, -16.024695711685304]">
 *     <div (click)="alert('Foo')" class="marker">Hello</div>
 *   </mgl-marker>
 * </mgl-map>
 * ```
 *
 * Note: Only use this if you **really** need to use HTML/Angular component to render your symbol. These markers are slow compared to a `Layer` of symbol because they're not rendered using WebGL.
 */
export declare class MarkerComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {
    private mapService;
    offset?: MarkerOptions['offset'];
    anchor?: MarkerOptions['anchor'];
    clickTolerance?: MarkerOptions['clickTolerance'];
    color?: MarkerOptions['color'];
    feature?: GeoJSON.Feature<GeoJSON.Point>;
    lngLat?: LngLatLike;
    draggable?: MarkerOptions['draggable'];
    popupShown?: boolean;
    className: string;
    pitchAlignment?: MarkerOptions['pitchAlignment'];
    rotationAlignment?: MarkerOptions['rotationAlignment'];
    rotation?: MarkerOptions['rotation'];
    markerDragStart: EventEmitter<Marker>;
    markerDragEnd: EventEmitter<Marker>;
    markerDrag: EventEmitter<Marker>;
    content: ElementRef;
    markerInstance?: Marker;
    constructor(mapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    togglePopup(): void;
    updateCoordinates(coordinates: number[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MarkerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MarkerComponent, "mgl-marker", never, { "offset": { "alias": "offset"; "required": false; }; "anchor": { "alias": "anchor"; "required": false; }; "clickTolerance": { "alias": "clickTolerance"; "required": false; }; "color": { "alias": "color"; "required": false; }; "feature": { "alias": "feature"; "required": false; }; "lngLat": { "alias": "lngLat"; "required": false; }; "draggable": { "alias": "draggable"; "required": false; }; "popupShown": { "alias": "popupShown"; "required": false; }; "className": { "alias": "className"; "required": false; }; "pitchAlignment": { "alias": "pitchAlignment"; "required": false; }; "rotationAlignment": { "alias": "rotationAlignment"; "required": false; }; "rotation": { "alias": "rotation"; "required": false; }; }, { "markerDragStart": "markerDragStart"; "markerDragEnd": "markerDragEnd"; "markerDrag": "markerDrag"; }, never, ["*"], true, never>;
}
