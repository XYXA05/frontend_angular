import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { RasterDEMSourceSpecification } from 'maplibre-gl';
import { MapService } from '../map/map.service';
import * as i0 from "@angular/core";
/**
 * `mgl-raster-dem-source` - a raster DEM source
 * @see [raster DEM](https://maplibre.org/maplibre-style-spec/sources/#raster-dem)
 *
 * @category Source Components
 */
export declare class RasterDemSourceComponent implements OnInit, OnDestroy, OnChanges, RasterDEMSourceSpecification {
    private mapService;
    /** Init input */
    id: string;
    /** Dynamic input */
    url?: RasterDEMSourceSpecification['url'];
    /** Dynamic input */
    tiles?: RasterDEMSourceSpecification['tiles'];
    /** Dynamic input */
    bounds?: RasterDEMSourceSpecification['bounds'];
    /** Dynamic input */
    minzoom?: RasterDEMSourceSpecification['minzoom'];
    /** Dynamic input */
    maxzoom?: RasterDEMSourceSpecification['maxzoom'];
    /** Dynamic input */
    tileSize?: RasterDEMSourceSpecification['tileSize'];
    /** Dynamic input */
    attribution?: RasterDEMSourceSpecification['attribution'];
    /** Dynamic input */
    encoding?: RasterDEMSourceSpecification['encoding'];
    /** @hidden */
    type: RasterDEMSourceSpecification['type'];
    private sourceAdded;
    private sub;
    constructor(mapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private init;
    static ɵfac: i0.ɵɵFactoryDeclaration<RasterDemSourceComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RasterDemSourceComponent, "mgl-raster-dem-source", never, { "id": { "alias": "id"; "required": false; }; "url": { "alias": "url"; "required": false; }; "tiles": { "alias": "tiles"; "required": false; }; "bounds": { "alias": "bounds"; "required": false; }; "minzoom": { "alias": "minzoom"; "required": false; }; "maxzoom": { "alias": "maxzoom"; "required": false; }; "tileSize": { "alias": "tileSize"; "required": false; }; "attribution": { "alias": "attribution"; "required": false; }; "encoding": { "alias": "encoding"; "required": false; }; }, {}, never, never, true, never>;
}
