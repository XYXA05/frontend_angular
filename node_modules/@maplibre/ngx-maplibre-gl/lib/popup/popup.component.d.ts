import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { LngLatLike, Offset, PopupOptions } from 'maplibre-gl';
import { MapService } from '../map/map.service';
import { MarkerComponent } from '../marker/marker.component';
import * as i0 from "@angular/core";
/**
 * `mgl-popup` - a popup component
 * @see [Popup](https://maplibre.org/maplibre-gl-js/docs/API/classes/Popup/)
 *
 * @category Components
 *
 * @example
 * ```html
 * ...
 * <mgl-map ...>
 *   <mgl-popup [lngLat]="[-96, 37.8]" [closeOnClick]="false">
 *     <h1>Hello world !</h1>
 *   </mgl-popup>
 *   ...
 *   <mgl-marker #myMarker ...> ... </mgl-marker>
 *   <mgl-popup [marker]="myMarker"> Hello from marker ! </mgl-popup>
 * </mgl-map>
 * ```
 */
export declare class PopupComponent implements OnChanges, OnDestroy, OnInit {
    private mapService;
    /** Init input */
    closeButton?: PopupOptions['closeButton'];
    /** Init input */
    closeOnClick?: PopupOptions['closeOnClick'];
    /** Init input */
    closeOnMove?: PopupOptions['closeOnMove'];
    /** Init input */
    focusAfterOpen?: PopupOptions['focusAfterOpen'];
    /** Init input */
    anchor?: PopupOptions['anchor'];
    /** Init input */
    className?: PopupOptions['className'];
    /** Init input */
    maxWidth?: PopupOptions['maxWidth'];
    /**
     * Dynamic input [ngx]
     * Mutually exclusive with `lngLat`
     */
    feature?: GeoJSON.Feature<GeoJSON.Point>;
    /** Dynamic input */
    lngLat?: LngLatLike;
    /**
     * Dynamic input [ngx]
     * The targeted marker
     */
    marker?: MarkerComponent;
    /** Dynamic input */
    offset?: Offset;
    popupClose: EventEmitter<void>;
    popupOpen: EventEmitter<void>;
    /** @hidden */
    content: ElementRef;
    popupInstance?: maplibregl.Popup;
    constructor(mapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private createPopup;
    private addPopup;
    static ɵfac: i0.ɵɵFactoryDeclaration<PopupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PopupComponent, "mgl-popup", never, { "closeButton": { "alias": "closeButton"; "required": false; }; "closeOnClick": { "alias": "closeOnClick"; "required": false; }; "closeOnMove": { "alias": "closeOnMove"; "required": false; }; "focusAfterOpen": { "alias": "focusAfterOpen"; "required": false; }; "anchor": { "alias": "anchor"; "required": false; }; "className": { "alias": "className"; "required": false; }; "maxWidth": { "alias": "maxWidth"; "required": false; }; "feature": { "alias": "feature"; "required": false; }; "lngLat": { "alias": "lngLat"; "required": false; }; "marker": { "alias": "marker"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; }, { "popupClose": "popupClose"; "popupOpen": "popupOpen"; }, never, ["*"], true, never>;
}
