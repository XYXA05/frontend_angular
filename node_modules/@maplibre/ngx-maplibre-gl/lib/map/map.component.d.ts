import { ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { AnimationOptions, LngLatBoundsLike, Map, MapLibreEvent, MapOptions, MapLibreZoomEvent, MapContextEvent, MapDataEvent, MapMouseEvent, MapTouchEvent, MapWheelEvent, PointLike, TerrainSpecification } from 'maplibre-gl';
import { MapService, MovingOptions } from './map.service';
import { MapEvent, EventData } from './map.types';
import * as i0 from "@angular/core";
/**
 * `mgl-map` - The main map component
 * @see [Map](https://maplibre.org/maplibre-gl-js/docs/API/classes/Map/)
 *
 * @category Map Component
 *
 * @example
 * ```typescript
 * ...
 * @Component({
 *   template: `
 *   <mgl-map
 *     [style]="'https://demotiles.maplibre.org/style.json'"
 *     [zoom]="[9]"
 *     [center]="[-74.50, 40]"
 *     (mapLoad)="map = $event"
 *   ></mgl-map>
 *   `,
 * ...
 * })
 * export class DisplayMapComponent {
 *   map: Map; // MapLibre GL Map object (MapLibre is ran outside angular zone, keep that in mind when binding events from this object)
 * ...
 * }
 * ```
 */
export declare class MapComponent implements OnChanges, OnDestroy, Omit<MapOptions, 'bearing' | 'container' | 'pitch' | 'zoom'>, MapEvent {
    private mapService;
    private elementRef;
    /** Init input */
    collectResourceTiming?: MapOptions['collectResourceTiming'];
    /** Init input */
    crossSourceCollisions?: MapOptions['crossSourceCollisions'];
    /** Init input */
    customMapboxApiUrl?: string;
    /** Init input */
    fadeDuration?: MapOptions['fadeDuration'];
    /** Init input */
    hash?: MapOptions['hash'];
    /** Init input */
    refreshExpiredTiles?: MapOptions['refreshExpiredTiles'];
    /** Init input */
    failIfMajorPerformanceCaveat?: MapOptions['failIfMajorPerformanceCaveat'];
    /** Init input */
    bearingSnap?: MapOptions['bearingSnap'];
    /** Init input */
    interactive?: MapOptions['interactive'];
    /** Init input */
    pitchWithRotate?: MapOptions['pitchWithRotate'];
    /** Init input */
    clickTolerance?: MapOptions['clickTolerance'];
    /** Init input */
    attributionControl?: MapOptions['attributionControl'];
    /** Init input */
    logoPosition?: MapOptions['logoPosition'];
    /** Init input */
    maxTileCacheSize?: MapOptions['maxTileCacheSize'];
    /** Init input */
    localIdeographFontFamily?: MapOptions['localIdeographFontFamily'];
    /** Init input */
    preserveDrawingBuffer?: MapOptions['preserveDrawingBuffer'];
    /** Init input */
    trackResize?: MapOptions['trackResize'];
    /** Init input */
    transformRequest?: MapOptions['transformRequest'];
    /** Init input */
    bounds?: MapOptions['bounds'];
    /** Init input */
    antialias?: MapOptions['antialias'];
    /** Init input */
    locale: MapOptions['locale'];
    /** Init inputs */
    cooperativeGestures?: MapOptions['cooperativeGestures'];
    /** Dynamic input */
    minZoom?: MapOptions['minZoom'];
    /** Dynamic input */
    maxZoom?: MapOptions['maxZoom'];
    /** Dynamic input */
    minPitch?: MapOptions['minPitch'];
    /** Dynamic input */
    maxPitch?: MapOptions['maxPitch'];
    /** Dynamic input */
    scrollZoom?: MapOptions['scrollZoom'];
    /** Dynamic input */
    dragRotate?: MapOptions['dragRotate'];
    /** Dynamic input */
    touchPitch?: MapOptions['touchPitch'];
    /** Dynamic input */
    touchZoomRotate?: MapOptions['touchZoomRotate'];
    /** Dynamic input */
    doubleClickZoom?: MapOptions['doubleClickZoom'];
    /** Dynamic input */
    keyboard?: MapOptions['keyboard'];
    /** Dynamic input */
    dragPan?: MapOptions['dragPan'];
    /** Dynamic input */
    boxZoom?: MapOptions['boxZoom'];
    /** Dynamic input */
    style: MapOptions['style'];
    /** Dynamic input */
    center?: MapOptions['center'];
    /** Dynamic input */
    maxBounds?: MapOptions['maxBounds'];
    /** Dynamic input */
    zoom?: [number];
    /** Dynamic input */
    bearing?: [number];
    /** Dynamic input */
    pitch?: [number];
    /** Dynamic input */
    fitBoundsOptions?: MapOptions['fitBoundsOptions'];
    /** Dynamic input */
    renderWorldCopies?: MapOptions['renderWorldCopies'];
    /** Dynamic input */
    terrain: TerrainSpecification;
    /** Added by ngx-mapbox-gl */
    movingMethod: 'jumpTo' | 'easeTo' | 'flyTo';
    /** Added by ngx-mapbox-gl */
    movingOptions?: MovingOptions;
    fitBounds?: LngLatBoundsLike;
    fitScreenCoordinates?: [PointLike, PointLike];
    centerWithPanTo?: boolean;
    panToOptions?: AnimationOptions;
    cursorStyle?: string;
    mapResize: EventEmitter<MapLibreEvent & EventData>;
    mapRemove: EventEmitter<MapLibreEvent & EventData>;
    mapMouseDown: EventEmitter<MapMouseEvent & EventData>;
    mapMouseUp: EventEmitter<MapMouseEvent & EventData>;
    mapMouseMove: EventEmitter<MapMouseEvent & EventData>;
    mapClick: EventEmitter<MapMouseEvent & EventData>;
    mapDblClick: EventEmitter<MapMouseEvent & EventData>;
    mapMouseOver: EventEmitter<MapMouseEvent & EventData>;
    mapMouseOut: EventEmitter<MapMouseEvent & EventData>;
    mapContextMenu: EventEmitter<MapMouseEvent & EventData>;
    mapTouchStart: EventEmitter<MapTouchEvent & EventData>;
    mapTouchEnd: EventEmitter<MapTouchEvent & EventData>;
    mapTouchMove: EventEmitter<MapTouchEvent & EventData>;
    mapTouchCancel: EventEmitter<MapTouchEvent & EventData>;
    mapWheel: EventEmitter<MapWheelEvent & EventData>;
    moveStart: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    move: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    moveEnd: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    mapDragStart: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    mapDrag: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    mapDragEnd: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    zoomStart: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    zoomEvt: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    zoomEnd: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    rotateStart: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    rotate: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    rotateEnd: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    pitchStart: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    pitchEvt: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    pitchEnd: EventEmitter<MapLibreEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    boxZoomStart: EventEmitter<MapLibreZoomEvent & EventData>;
    boxZoomEnd: EventEmitter<MapLibreZoomEvent & EventData>;
    boxZoomCancel: EventEmitter<MapLibreZoomEvent & EventData>;
    webGlContextLost: EventEmitter<MapContextEvent & EventData>;
    webGlContextRestored: EventEmitter<MapContextEvent & EventData>;
    mapLoad: EventEmitter<Map>;
    idle: EventEmitter<MapLibreEvent & EventData>;
    render: EventEmitter<MapLibreEvent & EventData>;
    mapError: EventEmitter<ErrorEvent & EventData>;
    data: EventEmitter<MapDataEvent & EventData>;
    styleData: EventEmitter<MapLibreEvent<unknown> & {
        dataType: "style";
    } & EventData>;
    sourceData: EventEmitter<MapLibreEvent<unknown> & {
        dataType: "source";
        isSourceLoaded: boolean;
        source: import("maplibre-gl").SourceSpecification;
        sourceId: string;
        sourceDataType: import("maplibre-gl").MapSourceDataType;
        tile: any;
    } & EventData>;
    dataLoading: EventEmitter<MapDataEvent & EventData>;
    styleDataLoading: EventEmitter<MapLibreEvent<unknown> & {
        dataType: "style";
    } & EventData>;
    sourceDataLoading: EventEmitter<MapLibreEvent<unknown> & {
        dataType: "source";
        isSourceLoaded: boolean;
        source: import("maplibre-gl").SourceSpecification;
        sourceId: string;
        sourceDataType: import("maplibre-gl").MapSourceDataType;
        tile: any;
    } & EventData>;
    styleImageMissing: EventEmitter<{
        id: string;
    } & EventData>;
    get mapInstance(): Map;
    private subscriptions;
    mapContainer: ElementRef;
    constructor(mapService: MapService, elementRef: ElementRef);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapComponent, "mgl-map", never, { "collectResourceTiming": { "alias": "collectResourceTiming"; "required": false; }; "crossSourceCollisions": { "alias": "crossSourceCollisions"; "required": false; }; "customMapboxApiUrl": { "alias": "customMapboxApiUrl"; "required": false; }; "fadeDuration": { "alias": "fadeDuration"; "required": false; }; "hash": { "alias": "hash"; "required": false; }; "refreshExpiredTiles": { "alias": "refreshExpiredTiles"; "required": false; }; "failIfMajorPerformanceCaveat": { "alias": "failIfMajorPerformanceCaveat"; "required": false; }; "bearingSnap": { "alias": "bearingSnap"; "required": false; }; "interactive": { "alias": "interactive"; "required": false; }; "pitchWithRotate": { "alias": "pitchWithRotate"; "required": false; }; "clickTolerance": { "alias": "clickTolerance"; "required": false; }; "attributionControl": { "alias": "attributionControl"; "required": false; }; "logoPosition": { "alias": "logoPosition"; "required": false; }; "maxTileCacheSize": { "alias": "maxTileCacheSize"; "required": false; }; "localIdeographFontFamily": { "alias": "localIdeographFontFamily"; "required": false; }; "preserveDrawingBuffer": { "alias": "preserveDrawingBuffer"; "required": false; }; "trackResize": { "alias": "trackResize"; "required": false; }; "transformRequest": { "alias": "transformRequest"; "required": false; }; "bounds": { "alias": "bounds"; "required": false; }; "antialias": { "alias": "antialias"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "cooperativeGestures": { "alias": "cooperativeGestures"; "required": false; }; "minZoom": { "alias": "minZoom"; "required": false; }; "maxZoom": { "alias": "maxZoom"; "required": false; }; "minPitch": { "alias": "minPitch"; "required": false; }; "maxPitch": { "alias": "maxPitch"; "required": false; }; "scrollZoom": { "alias": "scrollZoom"; "required": false; }; "dragRotate": { "alias": "dragRotate"; "required": false; }; "touchPitch": { "alias": "touchPitch"; "required": false; }; "touchZoomRotate": { "alias": "touchZoomRotate"; "required": false; }; "doubleClickZoom": { "alias": "doubleClickZoom"; "required": false; }; "keyboard": { "alias": "keyboard"; "required": false; }; "dragPan": { "alias": "dragPan"; "required": false; }; "boxZoom": { "alias": "boxZoom"; "required": false; }; "style": { "alias": "style"; "required": false; }; "center": { "alias": "center"; "required": false; }; "maxBounds": { "alias": "maxBounds"; "required": false; }; "zoom": { "alias": "zoom"; "required": false; }; "bearing": { "alias": "bearing"; "required": false; }; "pitch": { "alias": "pitch"; "required": false; }; "fitBoundsOptions": { "alias": "fitBoundsOptions"; "required": false; }; "renderWorldCopies": { "alias": "renderWorldCopies"; "required": false; }; "terrain": { "alias": "terrain"; "required": false; }; "movingMethod": { "alias": "movingMethod"; "required": false; }; "movingOptions": { "alias": "movingOptions"; "required": false; }; "fitBounds": { "alias": "fitBounds"; "required": false; }; "fitScreenCoordinates": { "alias": "fitScreenCoordinates"; "required": false; }; "centerWithPanTo": { "alias": "centerWithPanTo"; "required": false; }; "panToOptions": { "alias": "panToOptions"; "required": false; }; "cursorStyle": { "alias": "cursorStyle"; "required": false; }; }, { "mapResize": "mapResize"; "mapRemove": "mapRemove"; "mapMouseDown": "mapMouseDown"; "mapMouseUp": "mapMouseUp"; "mapMouseMove": "mapMouseMove"; "mapClick": "mapClick"; "mapDblClick": "mapDblClick"; "mapMouseOver": "mapMouseOver"; "mapMouseOut": "mapMouseOut"; "mapContextMenu": "mapContextMenu"; "mapTouchStart": "mapTouchStart"; "mapTouchEnd": "mapTouchEnd"; "mapTouchMove": "mapTouchMove"; "mapTouchCancel": "mapTouchCancel"; "mapWheel": "mapWheel"; "moveStart": "moveStart"; "move": "move"; "moveEnd": "moveEnd"; "mapDragStart": "mapDragStart"; "mapDrag": "mapDrag"; "mapDragEnd": "mapDragEnd"; "zoomStart": "zoomStart"; "zoomEvt": "zoomEvt"; "zoomEnd": "zoomEnd"; "rotateStart": "rotateStart"; "rotate": "rotate"; "rotateEnd": "rotateEnd"; "pitchStart": "pitchStart"; "pitchEvt": "pitchEvt"; "pitchEnd": "pitchEnd"; "boxZoomStart": "boxZoomStart"; "boxZoomEnd": "boxZoomEnd"; "boxZoomCancel": "boxZoomCancel"; "webGlContextLost": "webGlContextLost"; "webGlContextRestored": "webGlContextRestored"; "mapLoad": "mapLoad"; "idle": "idle"; "render": "render"; "mapError": "mapError"; "data": "data"; "styleData": "styleData"; "sourceData": "sourceData"; "dataLoading": "dataLoading"; "styleDataLoading": "styleDataLoading"; "sourceDataLoading": "sourceDataLoading"; "styleImageMissing": "styleImageMissing"; }, never, never, true, never>;
}
